/**
 * generated by Xtext 2.21.0
 */
package smitey.tests;

import com.google.common.base.Objects;
import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import smitey.rpgindividual.Declaration;
import smitey.rpgindividual.Entities;
import smitey.rpgindividual.Entity;
import smitey.rpgindividual.Move;
import smitey.rpgindividual.SystemRPG;
import smitey.tests.RpgindividualInjectorProvider;

@ExtendWith(InjectionExtension.class)
@InjectWith(RpgindividualInjectorProvider.class)
@SuppressWarnings("all")
public class RpgindividualParsingTest {
  @Inject
  private ParseHelper<SystemRPG> parseHelper;
  
  @Test
  public void T00_loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("game TestGame");
      _builder.newLine();
      _builder.newLine();
      _builder.append("location Test opponents TestTeamB");
      _builder.newLine();
      _builder.newLine();
      _builder.append("relations");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("type one");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("zero < one < two");
      _builder.newLine();
      _builder.newLine();
      _builder.append("attributes");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("attribute testAttributeOne is Integer");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("attribute testAttributeTwo is Integer");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("death when User testAttributeOne <= 0");
      _builder.newLine();
      _builder.newLine();
      _builder.append("effects");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("effect TestEffect ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("if User testAttributeTwo > 0 then Enemy testAttributeOne is User testAttributeOne-1");
      _builder.newLine();
      _builder.append("    ");
      _builder.newLine();
      _builder.append("moves");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("move testMove type one");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("attribute testAttributeTwo is Integer");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("effect TestEffect");
      _builder.newLine();
      _builder.newLine();
      _builder.append("entities");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("entity TestEntityOne type one");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("attribute testAttributeOne is 5");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("move testMove()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("entity TestEntityOne type one");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("attribute testAttributeOne is 5");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("move testMove()");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("teams");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("team TestTeamA");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("members TestEntityOne");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("team TestTeamB");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("members TestEntityTwo");
      _builder.newLine();
      final SystemRPG result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void T01_testDeclarationSize() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("game TestGame");
      _builder.newLine();
      _builder.newLine();
      _builder.append("location Test opponents TestTeamB");
      _builder.newLine();
      _builder.newLine();
      _builder.append("relations");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("type one");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("zero < one < two");
      _builder.newLine();
      _builder.newLine();
      _builder.append("attributes");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("attribute testAttributeOne is Integer");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("attribute testAttributeTwo is Integer");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("death when User testAttributeOne <= 0");
      _builder.newLine();
      _builder.newLine();
      _builder.append("effects");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("effect TestEffect ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("if User testAttributeTwo > 0 then Enemy testAttributeOne is User testAttributeOne-1");
      _builder.newLine();
      _builder.append("    ");
      _builder.newLine();
      _builder.append("moves");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("move testMove type one");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("attribute testAttributeTwo is Integer");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("effect TestEffect");
      _builder.newLine();
      _builder.newLine();
      _builder.append("entities");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("entity TestEntityOne type one");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("attribute testAttributeOne is 5");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("move testMove()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("entity TestEntityOne type one");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("attribute testAttributeOne is 5");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("move testMove()");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("teams");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("team TestTeamA");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("members TestEntityOne");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("team TestTeamB");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("members TestEntityTwo");
      _builder.newLine();
      final SystemRPG result = this.parseHelper.parse(_builder);
      Assertions.assertEquals(result.getDeclarations().size(), 8);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void T02_testParseEntities() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("game TestGame");
      _builder.newLine();
      _builder.newLine();
      _builder.append("location Test opponents TestTeamB");
      _builder.newLine();
      _builder.newLine();
      _builder.append("relations");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("type one");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("zero < one < two");
      _builder.newLine();
      _builder.newLine();
      _builder.append("attributes");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("attribute testAttributeOne is Integer");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("attribute testAttributeTwo is Integer");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("death when User testAttributeOne <= 0");
      _builder.newLine();
      _builder.newLine();
      _builder.append("effects");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("effect TestEffect ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("if User testAttributeTwo > 0 then Enemy testAttributeOne is User testAttributeOne-1");
      _builder.newLine();
      _builder.append("    ");
      _builder.newLine();
      _builder.append("moves");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("move testMove type one");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("attribute testAttributeTwo is Integer");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("effect TestEffect");
      _builder.newLine();
      _builder.newLine();
      _builder.append("entities");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("entity TestEntityOne type one");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("attribute testAttributeOne is 5");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("move testMove()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("entity TestEntityOne type one");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("attribute testAttributeOne is 5");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("move testMove()");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("teams");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("team TestTeamA");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("members TestEntityOne");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("team TestTeamB");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("members TestEntityTwo");
      _builder.newLine();
      final SystemRPG result = this.parseHelper.parse(_builder);
      Declaration _get = result.getDeclarations().get(6);
      Assertions.assertTrue((_get instanceof Entities));
      int _size = result.getDeclarations().get(6).eContents().size();
      boolean _equals = (_size == 2);
      Assertions.assertTrue(_equals);
      EList<EObject> _eContents = result.getDeclarations().get(6).eContents();
      for (final EObject e : _eContents) {
        {
          final Entity temp = ((Entity) e);
          Assertions.assertTrue((Objects.equal(temp.getName(), "TestEntityOne") || Objects.equal(temp.getName(), "TestEntityTwo")));
          int _size_1 = temp.getEMoves().getMove().size();
          boolean _greaterThan = (_size_1 > 0);
          Assertions.assertTrue(_greaterThan);
          Move _moveName = temp.getEMoves().getMove().get(0).getMoveName();
          Assertions.assertTrue((_moveName instanceof Move));
          String _name = temp.getEMoves().getMove().get(0).getMoveName().getName();
          boolean _equals_1 = Objects.equal(_name, "testMove");
          Assertions.assertTrue(_equals_1);
        }
      }
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
