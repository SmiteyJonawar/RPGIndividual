/*
 * generated by Xtext 2.21.0
 */
grammar InternalRpgindividual;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package smitey.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package smitey.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import smitey.services.RpgindividualGrammarAccess;

}

@parser::members {

 	private RpgindividualGrammarAccess grammarAccess;

    public InternalRpgindividualParser(TokenStream input, RpgindividualGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "SystemRPG";
   	}

   	@Override
   	protected RpgindividualGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleSystemRPG
entryRuleSystemRPG returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSystemRPGRule()); }
	iv_ruleSystemRPG=ruleSystemRPG
	{ $current=$iv_ruleSystemRPG.current; }
	EOF;

// Rule SystemRPG
ruleSystemRPG returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='game'
		{
			newLeafNode(otherlv_0, grammarAccess.getSystemRPGAccess().getGameKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSystemRPGAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSystemRPGRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSystemRPGAccess().getDeclarationsDeclarationParserRuleCall_2_0());
				}
				lv_declarations_2_0=ruleDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSystemRPGRule());
					}
					add(
						$current,
						"declarations",
						lv_declarations_2_0,
						"smitey.Rpgindividual.Declaration");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	iv_ruleDeclaration=ruleDeclaration
	{ $current=$iv_ruleDeclaration.current; }
	EOF;

// Rule Declaration
ruleDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDeclarationAccess().getLocationsParserRuleCall_0());
		}
		this_Locations_0=ruleLocations
		{
			$current = $this_Locations_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDeclarationAccess().getRelationsParserRuleCall_1());
		}
		this_Relations_1=ruleRelations
		{
			$current = $this_Relations_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDeclarationAccess().getMovesParserRuleCall_2());
		}
		this_Moves_2=ruleMoves
		{
			$current = $this_Moves_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDeclarationAccess().getEntitiesParserRuleCall_3());
		}
		this_Entities_3=ruleEntities
		{
			$current = $this_Entities_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDeclarationAccess().getTeamsParserRuleCall_4());
		}
		this_Teams_4=ruleTeams
		{
			$current = $this_Teams_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDeclarationAccess().getDeathParserRuleCall_5());
		}
		this_Death_5=ruleDeath
		{
			$current = $this_Death_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDeclarationAccess().getAttributesParserRuleCall_6());
		}
		this_Attributes_6=ruleAttributes
		{
			$current = $this_Attributes_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDeclarationAccess().getEffectsParserRuleCall_7());
		}
		this_Effects_7=ruleEffects
		{
			$current = $this_Effects_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEffects
entryRuleEffects returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEffectsRule()); }
	iv_ruleEffects=ruleEffects
	{ $current=$iv_ruleEffects.current; }
	EOF;

// Rule Effects
ruleEffects returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='effects'
		{
			newLeafNode(otherlv_0, grammarAccess.getEffectsAccess().getEffectsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEffectsAccess().getEffectEffectParserRuleCall_1_0());
				}
				lv_effect_1_0=ruleEffect
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEffectsRule());
					}
					add(
						$current,
						"effect",
						lv_effect_1_0,
						"smitey.Rpgindividual.Effect");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleEffect
entryRuleEffect returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEffectRule()); }
	iv_ruleEffect=ruleEffect
	{ $current=$iv_ruleEffect.current; }
	EOF;

// Rule Effect
ruleEffect returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='effect'
		{
			newLeafNode(otherlv_0, grammarAccess.getEffectAccess().getEffectKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getEffectAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEffectRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEffectAccess().getRuleRuleParserRuleCall_2_0());
				}
				lv_rule_2_0=ruleRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEffectRule());
					}
					set(
						$current,
						"rule",
						lv_rule_2_0,
						"smitey.Rpgindividual.Rule");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAttributes
entryRuleAttributes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributesRule()); }
	iv_ruleAttributes=ruleAttributes
	{ $current=$iv_ruleAttributes.current; }
	EOF;

// Rule Attributes
ruleAttributes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='attributes'
		{
			newLeafNode(otherlv_0, grammarAccess.getAttributesAccess().getAttributesKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributesAccess().getAttributeAttributeParserRuleCall_1_0());
				}
				lv_attribute_1_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributesRule());
					}
					add(
						$current,
						"attribute",
						lv_attribute_1_0,
						"smitey.Rpgindividual.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	iv_ruleAttribute=ruleAttribute
	{ $current=$iv_ruleAttribute.current; }
	EOF;

// Rule Attribute
ruleAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='attribute'
		{
			newLeafNode(otherlv_0, grammarAccess.getAttributeAccess().getAttributeKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttributeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributeAccess().getAValAttributeValuesParserRuleCall_2_0());
				}
				lv_aVal_2_0=ruleAttributeValues
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributeRule());
					}
					set(
						$current,
						"aVal",
						lv_aVal_2_0,
						"smitey.Rpgindividual.AttributeValues");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLocations
entryRuleLocations returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLocationsRule()); }
	iv_ruleLocations=ruleLocations
	{ $current=$iv_ruleLocations.current; }
	EOF;

// Rule Locations
ruleLocations returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='location'
		{
			newLeafNode(otherlv_0, grammarAccess.getLocationsAccess().getLocationKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLocationsAccess().getLocLocParserRuleCall_1_0());
				}
				lv_loc_1_0=ruleLoc
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLocationsRule());
					}
					add(
						$current,
						"loc",
						lv_loc_1_0,
						"smitey.Rpgindividual.Loc");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleLoc
entryRuleLoc returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLocRule()); }
	iv_ruleLoc=ruleLoc
	{ $current=$iv_ruleLoc.current; }
	EOF;

// Rule Loc
ruleLoc returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getLocAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLocRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='opponents'
		{
			newLeafNode(otherlv_1, grammarAccess.getLocAccess().getOpponentsKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLocRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getLocAccess().getTeamTeamCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleRelations
entryRuleRelations returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationsRule()); }
	iv_ruleRelations=ruleRelations
	{ $current=$iv_ruleRelations.current; }
	EOF;

// Rule Relations
ruleRelations returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='relations'
		{
			newLeafNode(otherlv_0, grammarAccess.getRelationsAccess().getRelationsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationsAccess().getTypeTypeParserRuleCall_1_0());
				}
				lv_type_1_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationsRule());
					}
					add(
						$current,
						"type",
						lv_type_1_0,
						"smitey.Rpgindividual.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='type'
		{
			newLeafNode(otherlv_0, grammarAccess.getTypeAccess().getTypeKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTypeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeAccess().getTExpressionTypeExpressionParserRuleCall_2_0());
				}
				lv_tExpression_2_0=ruleTypeExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeRule());
					}
					set(
						$current,
						"tExpression",
						lv_tExpression_2_0,
						"smitey.Rpgindividual.TypeExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleTypeExpression
entryRuleTypeExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeExpressionRule()); }
	iv_ruleTypeExpression=ruleTypeExpression
	{ $current=$iv_ruleTypeExpression.current; }
	EOF;

// Rule TypeExpression
ruleTypeExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='strong('
		{
			newLeafNode(otherlv_0, grammarAccess.getTypeExpressionAccess().getStrongKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeExpressionAccess().getRelationStrongFloatNumParserRuleCall_1_0());
				}
				lv_relationStrong_1_0=ruleFloatNum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeExpressionRule());
					}
					set(
						$current,
						"relationStrong",
						lv_relationStrong_1_0,
						"smitey.Rpgindividual.FloatNum");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='):'
		{
			newLeafNode(otherlv_2, grammarAccess.getTypeExpressionAccess().getRightParenthesisColonKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeExpressionRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getTypeExpressionAccess().getStrongTypeCrossReference_3_0());
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getTypeExpressionAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeExpressionRule());
						}
					}
					otherlv_5=RULE_ID
					{
						newLeafNode(otherlv_5, grammarAccess.getTypeExpressionAccess().getStrong2TypeCrossReference_4_1_0());
					}
				)
			)
		)*
		otherlv_6='weak('
		{
			newLeafNode(otherlv_6, grammarAccess.getTypeExpressionAccess().getWeakKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeExpressionAccess().getRelationWeakFloatNumParserRuleCall_6_0());
				}
				lv_relationWeak_7_0=ruleFloatNum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeExpressionRule());
					}
					set(
						$current,
						"relationWeak",
						lv_relationWeak_7_0,
						"smitey.Rpgindividual.FloatNum");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8='):'
		{
			newLeafNode(otherlv_8, grammarAccess.getTypeExpressionAccess().getRightParenthesisColonKeyword_7());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeExpressionRule());
					}
				}
				otherlv_9=RULE_ID
				{
					newLeafNode(otherlv_9, grammarAccess.getTypeExpressionAccess().getWeakTypeCrossReference_8_0());
				}
			)
		)
		(
			otherlv_10=','
			{
				newLeafNode(otherlv_10, grammarAccess.getTypeExpressionAccess().getCommaKeyword_9_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeExpressionRule());
						}
					}
					otherlv_11=RULE_ID
					{
						newLeafNode(otherlv_11, grammarAccess.getTypeExpressionAccess().getWeak2TypeCrossReference_9_1_0());
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMoves
entryRuleMoves returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMovesRule()); }
	iv_ruleMoves=ruleMoves
	{ $current=$iv_ruleMoves.current; }
	EOF;

// Rule Moves
ruleMoves returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='moves'
		{
			newLeafNode(otherlv_0, grammarAccess.getMovesAccess().getMovesKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMovesAccess().getMoveMoveParserRuleCall_1_0());
				}
				lv_move_1_0=ruleMove
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMovesRule());
					}
					add(
						$current,
						"move",
						lv_move_1_0,
						"smitey.Rpgindividual.Move");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleMove
entryRuleMove returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMoveRule()); }
	iv_ruleMove=ruleMove
	{ $current=$iv_ruleMove.current; }
	EOF;

// Rule Move
ruleMove returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='move'
		{
			newLeafNode(otherlv_0, grammarAccess.getMoveAccess().getMoveKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getMoveAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMoveRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMoveAccess().getETypeETypeParserRuleCall_2_0());
				}
				lv_eType_2_0=ruleEType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMoveRule());
					}
					set(
						$current,
						"eType",
						lv_eType_2_0,
						"smitey.Rpgindividual.EType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMoveAccess().getAttAltAttributeParserRuleCall_3_0());
				}
				lv_att_3_0=ruleAltAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMoveRule());
					}
					add(
						$current,
						"att",
						lv_att_3_0,
						"smitey.Rpgindividual.AltAttribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getMoveAccess().getMEffectMEffectParserRuleCall_4_0());
				}
				lv_mEffect_4_0=ruleMEffect
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMoveRule());
					}
					add(
						$current,
						"mEffect",
						lv_mEffect_4_0,
						"smitey.Rpgindividual.MEffect");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleMEffect
entryRuleMEffect returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMEffectRule()); }
	iv_ruleMEffect=ruleMEffect
	{ $current=$iv_ruleMEffect.current; }
	EOF;

// Rule MEffect
ruleMEffect returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='effect'
		{
			newLeafNode(otherlv_0, grammarAccess.getMEffectAccess().getEffectKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMEffectRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getMEffectAccess().getMoveENameEffectCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleEType
entryRuleEType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getETypeRule()); }
	iv_ruleEType=ruleEType
	{ $current=$iv_ruleEType.current; }
	EOF;

// Rule EType
ruleEType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='type'
		{
			newLeafNode(otherlv_0, grammarAccess.getETypeAccess().getTypeKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getETypeRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getETypeAccess().getTypeTypeCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleAttributeValues
entryRuleAttributeValues returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeValuesRule()); }
	iv_ruleAttributeValues=ruleAttributeValues
	{ $current=$iv_ruleAttributeValues.current; }
	EOF;

// Rule AttributeValues
ruleAttributeValues returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='is'
		{
			newLeafNode(otherlv_0, grammarAccess.getAttributeValuesAccess().getIsKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAttributeValuesAccess().getLTypesLegalTypeParserRuleCall_1_0_0());
					}
					lv_lTypes_1_0=ruleLegalType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAttributeValuesRule());
						}
						set(
							$current,
							"lTypes",
							lv_lTypes_1_0,
							"smitey.Rpgindividual.LegalType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAttributeValuesAccess().getAnActualNumbersParserRuleCall_1_1_0());
					}
					lv_an_2_0=ruleActualNumbers
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAttributeValuesRule());
						}
						set(
							$current,
							"an",
							lv_an_2_0,
							"smitey.Rpgindividual.ActualNumbers");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleAltAttribute
entryRuleAltAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAltAttributeRule()); }
	iv_ruleAltAttribute=ruleAltAttribute
	{ $current=$iv_ruleAltAttribute.current; }
	EOF;

// Rule AltAttribute
ruleAltAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='attribute'
		{
			newLeafNode(otherlv_0, grammarAccess.getAltAttributeAccess().getAttributeKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAltAttributeRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getAltAttributeAccess().getAttributeAttributeCrossReference_1_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAltAttributeAccess().getAvAttributeValuesParserRuleCall_2_0());
				}
				lv_av_2_0=ruleAttributeValues
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAltAttributeRule());
					}
					set(
						$current,
						"av",
						lv_av_2_0,
						"smitey.Rpgindividual.AttributeValues");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current; }
	EOF;

// Rule Rule
ruleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='if'
			{
				newLeafNode(otherlv_0, grammarAccess.getRuleAccess().getIfKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRuleAccess().getOrORconditionParserRuleCall_0_1_0());
					}
					lv_or_1_0=ruleORcondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRuleRule());
						}
						set(
							$current,
							"or",
							lv_or_1_0,
							"smitey.Rpgindividual.ORcondition");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2='then'
			{
				newLeafNode(otherlv_2, grammarAccess.getRuleAccess().getThenKeyword_0_2());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getTargetThenTargetParserRuleCall_1_0());
				}
				lv_targetThen_3_0=ruleTarget
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"targetThen",
						lv_targetThen_3_0,
						"smitey.Rpgindividual.Target");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRuleRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getRuleAccess().getTargetAttAttributeCrossReference_2_0());
				}
			)
		)
		otherlv_5='is'
		{
			newLeafNode(otherlv_5, grammarAccess.getRuleAccess().getIsKeyword_3());
		}
		(
			(
				(
					lv_change_6_1='-'
					{
						newLeafNode(lv_change_6_1, grammarAccess.getRuleAccess().getChangeHyphenMinusKeyword_4_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRuleRule());
						}
						setWithLastConsumed($current, "change", lv_change_6_1, null);
					}
					    |
					lv_change_6_2='+'
					{
						newLeafNode(lv_change_6_2, grammarAccess.getRuleAccess().getChangePlusSignKeyword_4_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRuleRule());
						}
						setWithLastConsumed($current, "change", lv_change_6_2, null);
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getSumSumParserRuleCall_5_0());
				}
				lv_sum_7_0=ruleSum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"sum",
						lv_sum_7_0,
						"smitey.Rpgindividual.Sum");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEntities
entryRuleEntities returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntitiesRule()); }
	iv_ruleEntities=ruleEntities
	{ $current=$iv_ruleEntities.current; }
	EOF;

// Rule Entities
ruleEntities returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='entities'
		{
			newLeafNode(otherlv_0, grammarAccess.getEntitiesAccess().getEntitiesKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEntitiesAccess().getEntityEntityParserRuleCall_1_0());
				}
				lv_entity_1_0=ruleEntity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntitiesRule());
					}
					add(
						$current,
						"entity",
						lv_entity_1_0,
						"smitey.Rpgindividual.Entity");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleDeath
entryRuleDeath returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeathRule()); }
	iv_ruleDeath=ruleDeath
	{ $current=$iv_ruleDeath.current; }
	EOF;

// Rule Death
ruleDeath returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='death'
		{
			newLeafNode(otherlv_0, grammarAccess.getDeathAccess().getDeathKeyword_0());
		}
		otherlv_1='when'
		{
			newLeafNode(otherlv_1, grammarAccess.getDeathAccess().getWhenKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDeathAccess().getLogORconditionParserRuleCall_2_0());
				}
				lv_log_2_0=ruleORcondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeathRule());
					}
					set(
						$current,
						"log",
						lv_log_2_0,
						"smitey.Rpgindividual.ORcondition");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEntity
entryRuleEntity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntityRule()); }
	iv_ruleEntity=ruleEntity
	{ $current=$iv_ruleEntity.current; }
	EOF;

// Rule Entity
ruleEntity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='entity'
		{
			newLeafNode(otherlv_0, grammarAccess.getEntityAccess().getEntityKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEntityRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEntityAccess().getETypeETypeParserRuleCall_2_0());
				}
				lv_eType_2_0=ruleEType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntityRule());
					}
					set(
						$current,
						"eType",
						lv_eType_2_0,
						"smitey.Rpgindividual.EType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEntityAccess().getAttAltAttributeParserRuleCall_3_0());
				}
				lv_att_3_0=ruleAltAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntityRule());
					}
					add(
						$current,
						"att",
						lv_att_3_0,
						"smitey.Rpgindividual.AltAttribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getEntityAccess().getEMovesEntityMovesParserRuleCall_4_0());
				}
				lv_eMoves_4_0=ruleEntityMoves
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntityRule());
					}
					set(
						$current,
						"eMoves",
						lv_eMoves_4_0,
						"smitey.Rpgindividual.EntityMoves");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEntityMoves
entryRuleEntityMoves returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntityMovesRule()); }
	iv_ruleEntityMoves=ruleEntityMoves
	{ $current=$iv_ruleEntityMoves.current; }
	EOF;

// Rule EntityMoves
ruleEntityMoves returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='move'
		{
			newLeafNode(otherlv_0, grammarAccess.getEntityMovesAccess().getMoveKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEntityMovesAccess().getMoveEntityMoveModifierParserRuleCall_1_0());
				}
				lv_move_1_0=ruleEntityMoveModifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntityMovesRule());
					}
					add(
						$current,
						"move",
						lv_move_1_0,
						"smitey.Rpgindividual.EntityMoveModifier");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleEntityMoveModifier
entryRuleEntityMoveModifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntityMoveModifierRule()); }
	iv_ruleEntityMoveModifier=ruleEntityMoveModifier
	{ $current=$iv_ruleEntityMoveModifier.current; }
	EOF;

// Rule EntityMoveModifier
ruleEntityMoveModifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEntityMoveModifierRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getEntityMoveModifierAccess().getMoveNameMoveCrossReference_0_0());
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getEntityMoveModifierAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEntityMoveModifierAccess().getMoveModificationEntityMoveMultiplierParserRuleCall_2_0());
				}
				lv_moveModification_2_0=ruleEntityMoveMultiplier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntityMoveModifierRule());
					}
					add(
						$current,
						"moveModification",
						lv_moveModification_2_0,
						"smitey.Rpgindividual.EntityMoveMultiplier");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getEntityMoveModifierAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleEntityMoveMultiplier
entryRuleEntityMoveMultiplier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntityMoveMultiplierRule()); }
	iv_ruleEntityMoveMultiplier=ruleEntityMoveMultiplier
	{ $current=$iv_ruleEntityMoveMultiplier.current; }
	EOF;

// Rule EntityMoveMultiplier
ruleEntityMoveMultiplier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEntityMoveMultiplierRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getEntityMoveMultiplierAccess().getAttributeAttributeCrossReference_0_0());
				}
			)
		)
		otherlv_1='*'
		{
			newLeafNode(otherlv_1, grammarAccess.getEntityMoveMultiplierAccess().getAsteriskKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEntityMoveMultiplierAccess().getMultiplierSumParserRuleCall_2_0());
				}
				lv_multiplier_2_0=ruleSum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntityMoveMultiplierRule());
					}
					set(
						$current,
						"multiplier",
						lv_multiplier_2_0,
						"smitey.Rpgindividual.Sum");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTeams
entryRuleTeams returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTeamsRule()); }
	iv_ruleTeams=ruleTeams
	{ $current=$iv_ruleTeams.current; }
	EOF;

// Rule Teams
ruleTeams returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='teams'
		{
			newLeafNode(otherlv_0, grammarAccess.getTeamsAccess().getTeamsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTeamsAccess().getTeamTeamParserRuleCall_1_0());
				}
				lv_team_1_0=ruleTeam
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTeamsRule());
					}
					add(
						$current,
						"team",
						lv_team_1_0,
						"smitey.Rpgindividual.Team");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleTeam
entryRuleTeam returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTeamRule()); }
	iv_ruleTeam=ruleTeam
	{ $current=$iv_ruleTeam.current; }
	EOF;

// Rule Team
ruleTeam returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='team'
		{
			newLeafNode(otherlv_0, grammarAccess.getTeamAccess().getTeamKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTeamAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTeamRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTeamAccess().getMembersMembersParserRuleCall_2_0());
				}
				lv_members_2_0=ruleMembers
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTeamRule());
					}
					set(
						$current,
						"members",
						lv_members_2_0,
						"smitey.Rpgindividual.Members");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMembers
entryRuleMembers returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMembersRule()); }
	iv_ruleMembers=ruleMembers
	{ $current=$iv_ruleMembers.current; }
	EOF;

// Rule Members
ruleMembers returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='members'
		{
			newLeafNode(otherlv_0, grammarAccess.getMembersAccess().getMembersKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMembersRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getMembersAccess().getEntityEntityCrossReference_1_0());
				}
			)
		)+
	)
;

// Entry rule entryRuleORcondition
entryRuleORcondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getORconditionRule()); }
	iv_ruleORcondition=ruleORcondition
	{ $current=$iv_ruleORcondition.current; }
	EOF;

// Rule ORcondition
ruleORcondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getORconditionAccess().getANDconditionParserRuleCall_0());
		}
		this_ANDcondition_0=ruleANDcondition
		{
			$current = $this_ANDcondition_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_1='OR'
			{
				newLeafNode(otherlv_1, grammarAccess.getORconditionAccess().getORKeyword_1_0());
			}
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getORconditionAccess().getOrLeftAction_1_1(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getORconditionAccess().getRightANDconditionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleANDcondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getORconditionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"smitey.Rpgindividual.ANDcondition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleANDcondition
entryRuleANDcondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getANDconditionRule()); }
	iv_ruleANDcondition=ruleANDcondition
	{ $current=$iv_ruleANDcondition.current; }
	EOF;

// Rule ANDcondition
ruleANDcondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getANDconditionAccess().getStatementParserRuleCall_0());
		}
		this_Statement_0=ruleStatement
		{
			$current = $this_Statement_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_1='AND'
			{
				newLeafNode(otherlv_1, grammarAccess.getANDconditionAccess().getANDKeyword_1_0());
			}
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getANDconditionAccess().getAndLeftAction_1_1(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getANDconditionAccess().getRightStatementParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getANDconditionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"smitey.Rpgindividual.Statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getNumberComparingParserRuleCall_0());
		}
		this_NumberComparing_0=ruleNumberComparing
		{
			$current = $this_NumberComparing_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getStatementAccess().getLeftParenthesisKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getStatementAccess().getORconditionParserRuleCall_1_1());
			}
			this_ORcondition_2=ruleORcondition
			{
				$current = $this_ORcondition_2.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getStatementAccess().getRightParenthesisKeyword_1_2());
			}
		)
	)
;

// Entry rule entryRuleNumberComparing
entryRuleNumberComparing returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberComparingRule()); }
	iv_ruleNumberComparing=ruleNumberComparing
	{ $current=$iv_ruleNumberComparing.current; }
	EOF;

// Rule NumberComparing
ruleNumberComparing returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getNumberComparingAccess().getLeftSumParserRuleCall_0_0());
				}
				lv_left_0_0=ruleSum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumberComparingRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"smitey.Rpgindividual.Sum");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getNumberComparingAccess().getCompComparatorParserRuleCall_1_0());
				}
				lv_comp_1_0=ruleComparator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumberComparingRule());
					}
					set(
						$current,
						"comp",
						lv_comp_1_0,
						"smitey.Rpgindividual.Comparator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getNumberComparingAccess().getRightSumParserRuleCall_2_0());
				}
				lv_right_2_0=ruleSum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumberComparingRule());
					}
					set(
						$current,
						"right",
						lv_right_2_0,
						"smitey.Rpgindividual.Sum");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleComparator
entryRuleComparator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparatorRule()); }
	iv_ruleComparator=ruleComparator
	{ $current=$iv_ruleComparator.current; }
	EOF;

// Rule Comparator
ruleComparator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getComparatorAccess().getSmallerAction_0_0(),
						$current);
				}
			)
			otherlv_1='<'
			{
				newLeafNode(otherlv_1, grammarAccess.getComparatorAccess().getLessThanSignKeyword_0_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getComparatorAccess().getSmallerEqAction_1_0(),
						$current);
				}
			)
			otherlv_3='<='
			{
				newLeafNode(otherlv_3, grammarAccess.getComparatorAccess().getLessThanSignEqualsSignKeyword_1_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getComparatorAccess().getEqAction_2_0(),
						$current);
				}
			)
			otherlv_5='=='
			{
				newLeafNode(otherlv_5, grammarAccess.getComparatorAccess().getEqualsSignEqualsSignKeyword_2_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getComparatorAccess().getBiggerEqAction_3_0(),
						$current);
				}
			)
			otherlv_7='>='
			{
				newLeafNode(otherlv_7, grammarAccess.getComparatorAccess().getGreaterThanSignEqualsSignKeyword_3_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getComparatorAccess().getBiggerAction_4_0(),
						$current);
				}
			)
			otherlv_9='>'
			{
				newLeafNode(otherlv_9, grammarAccess.getComparatorAccess().getGreaterThanSignKeyword_4_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getComparatorAccess().getNEqAction_5_0(),
						$current);
				}
			)
			otherlv_11='!='
			{
				newLeafNode(otherlv_11, grammarAccess.getComparatorAccess().getExclamationMarkEqualsSignKeyword_5_1());
			}
		)
	)
;

// Entry rule entryRuleSum
entryRuleSum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSumRule()); }
	iv_ruleSum=ruleSum
	{ $current=$iv_ruleSum.current; }
	EOF;

// Rule Sum
ruleSum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSumAccess().getMultiplyParserRuleCall_0());
		}
		this_Multiply_0=ruleMultiply
		{
			$current = $this_Multiply_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					otherlv_1='+'
					{
						newLeafNode(otherlv_1, grammarAccess.getSumAccess().getPlusSignKeyword_1_0_0_0());
					}
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getSumAccess().getAddLeftAction_1_0_0_1(),
								$current);
						}
					)
				)
				    |
				(
					otherlv_3='-'
					{
						newLeafNode(otherlv_3, grammarAccess.getSumAccess().getHyphenMinusKeyword_1_0_1_0());
					}
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getSumAccess().getSubLeftAction_1_0_1_1(),
								$current);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSumAccess().getRightMultiplyParserRuleCall_1_1_0());
					}
					lv_right_5_0=ruleMultiply
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSumRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"smitey.Rpgindividual.Multiply");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMultiply
entryRuleMultiply returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplyRule()); }
	iv_ruleMultiply=ruleMultiply
	{ $current=$iv_ruleMultiply.current; }
	EOF;

// Rule Multiply
ruleMultiply returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplyAccess().getAtomicNumberParserRuleCall_0());
		}
		this_AtomicNumber_0=ruleAtomicNumber
		{
			$current = $this_AtomicNumber_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					otherlv_1='*'
					{
						newLeafNode(otherlv_1, grammarAccess.getMultiplyAccess().getAsteriskKeyword_1_0_0_0());
					}
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getMultiplyAccess().getMultLeftAction_1_0_0_1(),
								$current);
						}
					)
				)
				    |
				(
					otherlv_3='/'
					{
						newLeafNode(otherlv_3, grammarAccess.getMultiplyAccess().getSolidusKeyword_1_0_1_0());
					}
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getMultiplyAccess().getDivLeftAction_1_0_1_1(),
								$current);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplyAccess().getRightAtomicNumberParserRuleCall_1_1_0());
					}
					lv_right_5_0=ruleAtomicNumber
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplyRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"smitey.Rpgindividual.AtomicNumber");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAtomicNumber
entryRuleAtomicNumber returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicNumberRule()); }
	iv_ruleAtomicNumber=ruleAtomicNumber
	{ $current=$iv_ruleAtomicNumber.current; }
	EOF;

// Rule AtomicNumber
ruleAtomicNumber returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAtomicNumberAccess().getActualNumbersParserRuleCall_0());
		}
		this_ActualNumbers_0=ruleActualNumbers
		{
			$current = $this_ActualNumbers_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAtomicNumberAccess().getNameAttributeParserRuleCall_1());
		}
		this_NameAttribute_1=ruleNameAttribute
		{
			$current = $this_NameAttribute_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleActualNumbers
entryRuleActualNumbers returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActualNumbersRule()); }
	iv_ruleActualNumbers=ruleActualNumbers
	{ $current=$iv_ruleActualNumbers.current; }
	EOF;

// Rule ActualNumbers
ruleActualNumbers returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getActualNumbersAccess().getFloatNumParserRuleCall_0());
		}
		this_FloatNum_0=ruleFloatNum
		{
			$current = $this_FloatNum_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getActualNumbersAccess().getIntNumParserRuleCall_1());
		}
		this_IntNum_1=ruleIntNum
		{
			$current = $this_IntNum_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNameAttribute
entryRuleNameAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNameAttributeRule()); }
	iv_ruleNameAttribute=ruleNameAttribute
	{ $current=$iv_ruleNameAttribute.current; }
	EOF;

// Rule NameAttribute
ruleNameAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getNameAttributeAccess().getTargetTargetParserRuleCall_0_0());
				}
				lv_target_0_0=ruleTarget
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNameAttributeRule());
					}
					set(
						$current,
						"target",
						lv_target_0_0,
						"smitey.Rpgindividual.Target");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNameAttributeRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getNameAttributeAccess().getAttributeAttributeCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleIntNum
entryRuleIntNum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntNumRule()); }
	iv_ruleIntNum=ruleIntNum
	{ $current=$iv_ruleIntNum.current; }
	EOF;

// Rule IntNum
ruleIntNum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_INT
			{
				newLeafNode(lv_value_0_0, grammarAccess.getIntNumAccess().getValueINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIntNumRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleFloatNum
entryRuleFloatNum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFloatNumRule()); }
	iv_ruleFloatNum=ruleFloatNum
	{ $current=$iv_ruleFloatNum.current; }
	EOF;

// Rule FloatNum
ruleFloatNum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_i_0_0=RULE_INT
				{
					newLeafNode(lv_i_0_0, grammarAccess.getFloatNumAccess().getIINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFloatNumRule());
					}
					setWithLastConsumed(
						$current,
						"i",
						lv_i_0_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getFloatNumAccess().getFullStopKeyword_1());
		}
		(
			(
				lv_decimal_2_0=RULE_INT
				{
					newLeafNode(lv_decimal_2_0, grammarAccess.getFloatNumAccess().getDecimalINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFloatNumRule());
					}
					setWithLastConsumed(
						$current,
						"decimal",
						lv_decimal_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleTarget
entryRuleTarget returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTargetRule()); }
	iv_ruleTarget=ruleTarget
	{ $current=$iv_ruleTarget.current.getText(); }
	EOF;

// Rule Target
ruleTarget returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='User'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTargetAccess().getUserKeyword_0());
		}
		    |
		kw='Enemy'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTargetAccess().getEnemyKeyword_1());
		}
	)
;

// Entry rule entryRuleLegalType
entryRuleLegalType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLegalTypeRule()); }
	iv_ruleLegalType=ruleLegalType
	{ $current=$iv_ruleLegalType.current.getText(); }
	EOF;

// Rule LegalType
ruleLegalType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Float'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLegalTypeAccess().getFloatKeyword_0());
		}
		    |
		kw='Integer'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLegalTypeAccess().getIntegerKeyword_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
