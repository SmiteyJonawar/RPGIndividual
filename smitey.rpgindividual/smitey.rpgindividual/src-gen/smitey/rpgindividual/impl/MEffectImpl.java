/**
 * generated by Xtext 2.21.0
 */
package smitey.rpgindividual.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import smitey.rpgindividual.Effect;
import smitey.rpgindividual.MEffect;
import smitey.rpgindividual.RpgindividualPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>MEffect</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link smitey.rpgindividual.impl.MEffectImpl#getMoveEName <em>Move EName</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MEffectImpl extends MinimalEObjectImpl.Container implements MEffect
{
  /**
   * The cached value of the '{@link #getMoveEName() <em>Move EName</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMoveEName()
   * @generated
   * @ordered
   */
  protected Effect moveEName;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MEffectImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RpgindividualPackage.Literals.MEFFECT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Effect getMoveEName()
  {
    if (moveEName != null && moveEName.eIsProxy())
    {
      InternalEObject oldMoveEName = (InternalEObject)moveEName;
      moveEName = (Effect)eResolveProxy(oldMoveEName);
      if (moveEName != oldMoveEName)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, RpgindividualPackage.MEFFECT__MOVE_ENAME, oldMoveEName, moveEName));
      }
    }
    return moveEName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Effect basicGetMoveEName()
  {
    return moveEName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMoveEName(Effect newMoveEName)
  {
    Effect oldMoveEName = moveEName;
    moveEName = newMoveEName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RpgindividualPackage.MEFFECT__MOVE_ENAME, oldMoveEName, moveEName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RpgindividualPackage.MEFFECT__MOVE_ENAME:
        if (resolve) return getMoveEName();
        return basicGetMoveEName();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RpgindividualPackage.MEFFECT__MOVE_ENAME:
        setMoveEName((Effect)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RpgindividualPackage.MEFFECT__MOVE_ENAME:
        setMoveEName((Effect)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RpgindividualPackage.MEFFECT__MOVE_ENAME:
        return moveEName != null;
    }
    return super.eIsSet(featureID);
  }

} //MEffectImpl
