/*
 * generated by Xtext 2.21.0
 */
package smitey.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import smitey.ide.contentassist.antlr.internal.InternalRpgindividualParser;
import smitey.services.RpgindividualGrammarAccess;

public class RpgindividualParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(RpgindividualGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, RpgindividualGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getDeclarationAccess().getAlternatives(), "rule__Declaration__Alternatives");
			builder.put(grammarAccess.getAttributeValuesAccess().getAlternatives_1(), "rule__AttributeValues__Alternatives_1");
			builder.put(grammarAccess.getRuleAccess().getChangeAlternatives_4_0(), "rule__Rule__ChangeAlternatives_4_0");
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getComparatorAccess().getAlternatives(), "rule__Comparator__Alternatives");
			builder.put(grammarAccess.getSumAccess().getAlternatives_1_0(), "rule__Sum__Alternatives_1_0");
			builder.put(grammarAccess.getMultiplyAccess().getAlternatives_1_0(), "rule__Multiply__Alternatives_1_0");
			builder.put(grammarAccess.getAtomicNumberAccess().getAlternatives(), "rule__AtomicNumber__Alternatives");
			builder.put(grammarAccess.getActualNumbersAccess().getAlternatives(), "rule__ActualNumbers__Alternatives");
			builder.put(grammarAccess.getTargetAccess().getAlternatives(), "rule__Target__Alternatives");
			builder.put(grammarAccess.getLegalTypeAccess().getAlternatives(), "rule__LegalType__Alternatives");
			builder.put(grammarAccess.getSystemRPGAccess().getGroup(), "rule__SystemRPG__Group__0");
			builder.put(grammarAccess.getEffectsAccess().getGroup(), "rule__Effects__Group__0");
			builder.put(grammarAccess.getEffectAccess().getGroup(), "rule__Effect__Group__0");
			builder.put(grammarAccess.getAttributesAccess().getGroup(), "rule__Attributes__Group__0");
			builder.put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
			builder.put(grammarAccess.getLocationsAccess().getGroup(), "rule__Locations__Group__0");
			builder.put(grammarAccess.getLocAccess().getGroup(), "rule__Loc__Group__0");
			builder.put(grammarAccess.getRelationsAccess().getGroup(), "rule__Relations__Group__0");
			builder.put(grammarAccess.getTypeAccess().getGroup(), "rule__Type__Group__0");
			builder.put(grammarAccess.getTypeExpressionAccess().getGroup(), "rule__TypeExpression__Group__0");
			builder.put(grammarAccess.getTypeExpressionAccess().getGroup_4(), "rule__TypeExpression__Group_4__0");
			builder.put(grammarAccess.getTypeExpressionAccess().getGroup_9(), "rule__TypeExpression__Group_9__0");
			builder.put(grammarAccess.getMovesAccess().getGroup(), "rule__Moves__Group__0");
			builder.put(grammarAccess.getMoveAccess().getGroup(), "rule__Move__Group__0");
			builder.put(grammarAccess.getMEffectAccess().getGroup(), "rule__MEffect__Group__0");
			builder.put(grammarAccess.getETypeAccess().getGroup(), "rule__EType__Group__0");
			builder.put(grammarAccess.getAttributeValuesAccess().getGroup(), "rule__AttributeValues__Group__0");
			builder.put(grammarAccess.getAltAttributeAccess().getGroup(), "rule__AltAttribute__Group__0");
			builder.put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
			builder.put(grammarAccess.getRuleAccess().getGroup_0(), "rule__Rule__Group_0__0");
			builder.put(grammarAccess.getEntitiesAccess().getGroup(), "rule__Entities__Group__0");
			builder.put(grammarAccess.getDeathAccess().getGroup(), "rule__Death__Group__0");
			builder.put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
			builder.put(grammarAccess.getEntityMovesAccess().getGroup(), "rule__EntityMoves__Group__0");
			builder.put(grammarAccess.getEntityMoveModifierAccess().getGroup(), "rule__EntityMoveModifier__Group__0");
			builder.put(grammarAccess.getEntityMoveMultiplierAccess().getGroup(), "rule__EntityMoveMultiplier__Group__0");
			builder.put(grammarAccess.getTeamsAccess().getGroup(), "rule__Teams__Group__0");
			builder.put(grammarAccess.getTeamAccess().getGroup(), "rule__Team__Group__0");
			builder.put(grammarAccess.getMembersAccess().getGroup(), "rule__Members__Group__0");
			builder.put(grammarAccess.getORconditionAccess().getGroup(), "rule__ORcondition__Group__0");
			builder.put(grammarAccess.getORconditionAccess().getGroup_1(), "rule__ORcondition__Group_1__0");
			builder.put(grammarAccess.getANDconditionAccess().getGroup(), "rule__ANDcondition__Group__0");
			builder.put(grammarAccess.getANDconditionAccess().getGroup_1(), "rule__ANDcondition__Group_1__0");
			builder.put(grammarAccess.getStatementAccess().getGroup_1(), "rule__Statement__Group_1__0");
			builder.put(grammarAccess.getNumberComparingAccess().getGroup(), "rule__NumberComparing__Group__0");
			builder.put(grammarAccess.getComparatorAccess().getGroup_0(), "rule__Comparator__Group_0__0");
			builder.put(grammarAccess.getComparatorAccess().getGroup_1(), "rule__Comparator__Group_1__0");
			builder.put(grammarAccess.getComparatorAccess().getGroup_2(), "rule__Comparator__Group_2__0");
			builder.put(grammarAccess.getComparatorAccess().getGroup_3(), "rule__Comparator__Group_3__0");
			builder.put(grammarAccess.getComparatorAccess().getGroup_4(), "rule__Comparator__Group_4__0");
			builder.put(grammarAccess.getComparatorAccess().getGroup_5(), "rule__Comparator__Group_5__0");
			builder.put(grammarAccess.getSumAccess().getGroup(), "rule__Sum__Group__0");
			builder.put(grammarAccess.getSumAccess().getGroup_1(), "rule__Sum__Group_1__0");
			builder.put(grammarAccess.getSumAccess().getGroup_1_0_0(), "rule__Sum__Group_1_0_0__0");
			builder.put(grammarAccess.getSumAccess().getGroup_1_0_1(), "rule__Sum__Group_1_0_1__0");
			builder.put(grammarAccess.getMultiplyAccess().getGroup(), "rule__Multiply__Group__0");
			builder.put(grammarAccess.getMultiplyAccess().getGroup_1(), "rule__Multiply__Group_1__0");
			builder.put(grammarAccess.getMultiplyAccess().getGroup_1_0_0(), "rule__Multiply__Group_1_0_0__0");
			builder.put(grammarAccess.getMultiplyAccess().getGroup_1_0_1(), "rule__Multiply__Group_1_0_1__0");
			builder.put(grammarAccess.getNameAttributeAccess().getGroup(), "rule__NameAttribute__Group__0");
			builder.put(grammarAccess.getFloatNumAccess().getGroup(), "rule__FloatNum__Group__0");
			builder.put(grammarAccess.getSystemRPGAccess().getNameAssignment_1(), "rule__SystemRPG__NameAssignment_1");
			builder.put(grammarAccess.getSystemRPGAccess().getDeclarationsAssignment_2(), "rule__SystemRPG__DeclarationsAssignment_2");
			builder.put(grammarAccess.getEffectsAccess().getEffectAssignment_1(), "rule__Effects__EffectAssignment_1");
			builder.put(grammarAccess.getEffectAccess().getNameAssignment_1(), "rule__Effect__NameAssignment_1");
			builder.put(grammarAccess.getEffectAccess().getRuleAssignment_2(), "rule__Effect__RuleAssignment_2");
			builder.put(grammarAccess.getAttributesAccess().getAttributeAssignment_1(), "rule__Attributes__AttributeAssignment_1");
			builder.put(grammarAccess.getAttributeAccess().getNameAssignment_1(), "rule__Attribute__NameAssignment_1");
			builder.put(grammarAccess.getAttributeAccess().getAValAssignment_2(), "rule__Attribute__AValAssignment_2");
			builder.put(grammarAccess.getLocationsAccess().getLocAssignment_1(), "rule__Locations__LocAssignment_1");
			builder.put(grammarAccess.getLocAccess().getNameAssignment_0(), "rule__Loc__NameAssignment_0");
			builder.put(grammarAccess.getLocAccess().getTeamAssignment_2(), "rule__Loc__TeamAssignment_2");
			builder.put(grammarAccess.getRelationsAccess().getTypeAssignment_1(), "rule__Relations__TypeAssignment_1");
			builder.put(grammarAccess.getTypeAccess().getNameAssignment_1(), "rule__Type__NameAssignment_1");
			builder.put(grammarAccess.getTypeAccess().getTExpressionAssignment_2(), "rule__Type__TExpressionAssignment_2");
			builder.put(grammarAccess.getTypeExpressionAccess().getRelationStrongAssignment_1(), "rule__TypeExpression__RelationStrongAssignment_1");
			builder.put(grammarAccess.getTypeExpressionAccess().getStrongAssignment_3(), "rule__TypeExpression__StrongAssignment_3");
			builder.put(grammarAccess.getTypeExpressionAccess().getStrong2Assignment_4_1(), "rule__TypeExpression__Strong2Assignment_4_1");
			builder.put(grammarAccess.getTypeExpressionAccess().getRelationWeakAssignment_6(), "rule__TypeExpression__RelationWeakAssignment_6");
			builder.put(grammarAccess.getTypeExpressionAccess().getWeakAssignment_8(), "rule__TypeExpression__WeakAssignment_8");
			builder.put(grammarAccess.getTypeExpressionAccess().getWeak2Assignment_9_1(), "rule__TypeExpression__Weak2Assignment_9_1");
			builder.put(grammarAccess.getMovesAccess().getMoveAssignment_1(), "rule__Moves__MoveAssignment_1");
			builder.put(grammarAccess.getMoveAccess().getNameAssignment_1(), "rule__Move__NameAssignment_1");
			builder.put(grammarAccess.getMoveAccess().getETypeAssignment_2(), "rule__Move__ETypeAssignment_2");
			builder.put(grammarAccess.getMoveAccess().getAttAssignment_3(), "rule__Move__AttAssignment_3");
			builder.put(grammarAccess.getMoveAccess().getMEffectAssignment_4(), "rule__Move__MEffectAssignment_4");
			builder.put(grammarAccess.getMEffectAccess().getMoveENameAssignment_1(), "rule__MEffect__MoveENameAssignment_1");
			builder.put(grammarAccess.getETypeAccess().getTypeAssignment_1(), "rule__EType__TypeAssignment_1");
			builder.put(grammarAccess.getAttributeValuesAccess().getLTypesAssignment_1_0(), "rule__AttributeValues__LTypesAssignment_1_0");
			builder.put(grammarAccess.getAttributeValuesAccess().getAnAssignment_1_1(), "rule__AttributeValues__AnAssignment_1_1");
			builder.put(grammarAccess.getAltAttributeAccess().getAttributeAssignment_1(), "rule__AltAttribute__AttributeAssignment_1");
			builder.put(grammarAccess.getAltAttributeAccess().getAvAssignment_2(), "rule__AltAttribute__AvAssignment_2");
			builder.put(grammarAccess.getRuleAccess().getOrAssignment_0_1(), "rule__Rule__OrAssignment_0_1");
			builder.put(grammarAccess.getRuleAccess().getTargetThenAssignment_1(), "rule__Rule__TargetThenAssignment_1");
			builder.put(grammarAccess.getRuleAccess().getTargetAttAssignment_2(), "rule__Rule__TargetAttAssignment_2");
			builder.put(grammarAccess.getRuleAccess().getChangeAssignment_4(), "rule__Rule__ChangeAssignment_4");
			builder.put(grammarAccess.getRuleAccess().getSumAssignment_5(), "rule__Rule__SumAssignment_5");
			builder.put(grammarAccess.getEntitiesAccess().getEntityAssignment_1(), "rule__Entities__EntityAssignment_1");
			builder.put(grammarAccess.getDeathAccess().getLogAssignment_2(), "rule__Death__LogAssignment_2");
			builder.put(grammarAccess.getEntityAccess().getNameAssignment_1(), "rule__Entity__NameAssignment_1");
			builder.put(grammarAccess.getEntityAccess().getETypeAssignment_2(), "rule__Entity__ETypeAssignment_2");
			builder.put(grammarAccess.getEntityAccess().getAttAssignment_3(), "rule__Entity__AttAssignment_3");
			builder.put(grammarAccess.getEntityAccess().getEMovesAssignment_4(), "rule__Entity__EMovesAssignment_4");
			builder.put(grammarAccess.getEntityMovesAccess().getMoveAssignment_1(), "rule__EntityMoves__MoveAssignment_1");
			builder.put(grammarAccess.getEntityMoveModifierAccess().getMoveNameAssignment_0(), "rule__EntityMoveModifier__MoveNameAssignment_0");
			builder.put(grammarAccess.getEntityMoveModifierAccess().getMoveModificationAssignment_2(), "rule__EntityMoveModifier__MoveModificationAssignment_2");
			builder.put(grammarAccess.getEntityMoveMultiplierAccess().getAttributeAssignment_0(), "rule__EntityMoveMultiplier__AttributeAssignment_0");
			builder.put(grammarAccess.getEntityMoveMultiplierAccess().getMultiplierAssignment_2(), "rule__EntityMoveMultiplier__MultiplierAssignment_2");
			builder.put(grammarAccess.getTeamsAccess().getTeamAssignment_1(), "rule__Teams__TeamAssignment_1");
			builder.put(grammarAccess.getTeamAccess().getNameAssignment_1(), "rule__Team__NameAssignment_1");
			builder.put(grammarAccess.getTeamAccess().getMembersAssignment_2(), "rule__Team__MembersAssignment_2");
			builder.put(grammarAccess.getMembersAccess().getEntityAssignment_1(), "rule__Members__EntityAssignment_1");
			builder.put(grammarAccess.getORconditionAccess().getRightAssignment_1_2(), "rule__ORcondition__RightAssignment_1_2");
			builder.put(grammarAccess.getANDconditionAccess().getRightAssignment_1_2(), "rule__ANDcondition__RightAssignment_1_2");
			builder.put(grammarAccess.getNumberComparingAccess().getLeftAssignment_0(), "rule__NumberComparing__LeftAssignment_0");
			builder.put(grammarAccess.getNumberComparingAccess().getCompAssignment_1(), "rule__NumberComparing__CompAssignment_1");
			builder.put(grammarAccess.getNumberComparingAccess().getRightAssignment_2(), "rule__NumberComparing__RightAssignment_2");
			builder.put(grammarAccess.getSumAccess().getRightAssignment_1_1(), "rule__Sum__RightAssignment_1_1");
			builder.put(grammarAccess.getMultiplyAccess().getRightAssignment_1_1(), "rule__Multiply__RightAssignment_1_1");
			builder.put(grammarAccess.getNameAttributeAccess().getTargetAssignment_0(), "rule__NameAttribute__TargetAssignment_0");
			builder.put(grammarAccess.getNameAttributeAccess().getAttributeAssignment_1(), "rule__NameAttribute__AttributeAssignment_1");
			builder.put(grammarAccess.getIntNumAccess().getValueAssignment(), "rule__IntNum__ValueAssignment");
			builder.put(grammarAccess.getFloatNumAccess().getIAssignment_0(), "rule__FloatNum__IAssignment_0");
			builder.put(grammarAccess.getFloatNumAccess().getDecimalAssignment_2(), "rule__FloatNum__DecimalAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private RpgindividualGrammarAccess grammarAccess;

	@Override
	protected InternalRpgindividualParser createParser() {
		InternalRpgindividualParser result = new InternalRpgindividualParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RpgindividualGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RpgindividualGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
